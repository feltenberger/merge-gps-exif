#summary This describes the usage of merge-gps-exif

= Requirements =

  * Windows.  But only temporarily. _I promise_.
  * [http://java.sun.com/j2se/1.5.0/ Java 1.5 or later] with `JAVA_HOME` set
  * [http://maven.apache.org Maven2] with `mvn.bat` or `mvn.sh` in your path
  * [http://subversion.tigris.org/ A Subversion Client]

= Installation =

Grab a copy of the source code from the SVN repository using TortoiseSVN or `svn` from the command line, e.g.
{{{
svn checkout http://merge-gps-exif.googlecode.com/svn/trunk/ merge-gps-exif
}}}

Then, run a build:
{{{
mvn clean install
}}}

This will place all the necessary files in the target directory.

= CSV Format =

I wrote the import to be somewhat flexible in the column order and naming.  Currently you need a header field with latitude, longitude, date, time, and altitude at a minimum.  See the downloads section for a sample.  Your column headings need to have the following in them, respectively: "lat", "lon", "date", "time", and "alt".  Any variation on that is fine -- e.g. Latitude Degrees -- so long as one column doesn't have both terms.  The lat/lon values are currently calculated from a weird format that my GlobalSat Data Logger DG-100 exports to, but it should accept standard decimal, i.e. non-degree/hour/minute, format as well.  Eventually I'll add GPX support as well, as that's the standard.

|| Record Number ||Date || Time || Latitude || Longitude || Speed(mile/hour) || Altitude(feet) ||
||1||2007-08-09||06:42:34||3918.5949||-7637.3061||58.69||23.0||
||2||2007-08-09||06:43:05||3918.3556||-7636.8363||50.86||78.7||
||3||2007-08-09||06:43:35||3918.0310||-7636.6964||48.70||120596.9||
||4||2007-08-09||06:44:05||3917.6153||-7636.6420||45.68||120583.8||
||5||2007-08-09||06:44:37||3917.4347||-7636.4908||23.70||6.6||
||6||2007-08-09||06:45:08||3917.4252||-7636.7231||9.34||13.1||
||7||2007-08-09||06:46:02||3917.3950||-7636.7889||8.80||9.8||
||8||2007-08-09||06:46:32||3917.2135||-7636.8019||12.04||137.8||

is the equivalent of:

{{{
Record Number,Date         ,Time     ,Latitude,Longitude,Speed(mile/hour),Altitude(feet),
1,2007-08-09,06:42:34,3918.5949,-7637.3061,58.69,23.0
2,2007-08-09,06:43:05,3918.3556,-7636.8363,50.86,78.7
3,2007-08-09,06:43:35,3918.0310,-7636.6964,48.70,120596.9
4,2007-08-09,06:44:05,3917.6153,-7636.6420,45.68,120583.8
5,2007-08-09,06:44:37,3917.4347,-7636.4908,23.70,6.6
6,2007-08-09,06:45:08,3917.4252,-7636.7231,9.34,13.1
7,2007-08-09,06:46:02,3917.3950,-7636.7889,8.80,9.8
8,2007-08-09,06:46:32,3917.2135,-7636.8019,12.04,137.8
}}}

= Usage =

From the target directory, type

{{{
java -jar merge-gps-exif-1.0-SNAPSHOT.jar imagesDirectory recursiveFetch[true or false] csvGpsFile maxTimeDiffInSeconds
}}}

Here is an example:

{{{
java -jar merge-gps-exif-1.0-SNAPSHOT.jar "C:\Documents and Settings\Dave\Desktop\Chicago Pictures" true "C:\data\gps\Chicago GPS Points.csv" 35
}}}

merge.log has a list of what was merged, what wasn't able to be merged, and what failed.

= What it does =

The program will loop through all your images and merge the closest GPS fix with the date of image capture (as long as it's less than or equal to the max seconds you specify in the arguments list).  Your original -- untouched -- image file will be copied, just in case something goes wrong. If your image is named myImage.CR2, it will be renamed myImage.CR2_original.  Which brings up a good point: I've only tested this on Canon's CR2 format and TIFFs, but since the manipulation of the EXIF data is done by Phil Harvey's ExifTool, I'm reasonably certain all the formats he says he supports actually are supported (and there are many!).

= Excuses =

*Note:* This is incredibly inefficient at the moment - it's an n^2 worst case, which it will often hit.  I plan to make this way, way more efficient by using nested hash tables on the dates/times, so instead of looping, you can hash a couple times to find data closer to yours.  In the meantime, with small directory sizes, it should be okay.